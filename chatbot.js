// Importa as depend√™ncias
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const fs = require('fs');
const path = require('path');

// Inicializa o cliente com autentica√ß√£o persistente
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: 'whatsapp-chatbot',
        dataPath: './sessions'
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--single-process'
        ]
    }
});

// Mostra o QR Code no terminal
client.on('qr', (qr) => {
    console.log('üî∏ Escaneie o QR Code abaixo para conectar o WhatsApp:');
    qrcode.generate(qr, { small: true });
});

// Confirma quando o bot est√° pronto
client.on('ready', () => {
    console.log('‚úÖ WhatsApp conectado! Bot est√° ativo e pronto para atender.');
});

// Eventos de depura√ß√£o (opcional, mas √∫til)
client.on('auth_failure', (msg) => {
    console.log('‚ùå Falha na autentica√ß√£o:', msg);
});

client.on('disconnected', (reason) => {
    console.log('üî¥ Desconectado:', reason);
});

// Inicializa o cliente
client.initialize();

// Fun√ß√£o para simular digita√ß√£o
const delay = (ms) => new Promise(res => setTimeout(res, ms));

// Regex para sauda√ß√µes comuns
const saudacoesRegex = /^(oi|ol√°?|ola|eae|e a√≠|e ai|bom dia|boa tarde|boa noite|tudo bem\??|hey|hello|hi|salve|opa|fala|fala a√≠|falae|oie)$/i;

// Normaliza texto: remove acentos e converte para min√∫sculas
const normalizeText = (text) => {
    return text
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '');
};

// Evento principal: ao receber uma mensagem
client.on('message', async (msg) => {
    if (msg.fromMe) return;

    const chat = await msg.getChat();
    const from = msg.from;
    const body = msg.body?.trim();
    const normalizedBody = normalizeText(body || '');

    // Apenas responde contatos individuais
    if (!from.endsWith('@c.us')) return;

    // Simula digita√ß√£o
    await delay(1000);
    await chat.sendStateTyping();
    await delay(1000);

    try {
        // SAUDA√á√ÉO INICIAL
        if (body && body.match(saudacoesRegex)) {
            const contact = await msg.getContact();
            const name = contact.pushname || contact.notifyName || "usu√°rio";

            await client.sendMessage(
                from,
                `Ol√°! ${name.split(" ")[0]}, seja bem-vindo(a) ao atendimento do *Ambiente Virtual de Aprendizagem - EAD EGOV/DF*.\n\n` +
                `Digite o n√∫mero do servi√ßo desejado:\n\n` +
                `1Ô∏è‚É£ - Quero me inscrever em um curso\n` +
                `2Ô∏è‚É£ - Problema com login no AVA\n` +
                `3Ô∏è‚É£ - Hor√°rios de atendimento\n` +
                `4Ô∏è‚É£ - Falar com o suporte\n` +
                `5Ô∏è‚É£ - Exemplo de imagem\n` +
                `6Ô∏è‚É£ - Exemplo de grava√ß√£o de √°udio\n` +
                `7Ô∏è‚É£ - Exemplo de GIF\n\n` +
                `Digite *menu* a qualquer momento para voltar.`
            );
            return;
        }

        // MENU PRINCIPAL
        if (normalizedBody === 'menu') {
            await client.sendMessage(
                from,
                `üîÑ Voc√™ voltou ao menu principal!\n\n` +
                `1Ô∏è‚É£ - Quero me inscrever em um curso\n` +
                `2Ô∏è‚É£ - Problema com login no AVA\n` +
                `3Ô∏è‚É£ - Hor√°rios de atendimento\n` +
                `4Ô∏è‚É£ - Falar com o suporte\n` +
                `5Ô∏è‚É£ - Exemplo de imagem\n` +
                `6Ô∏è‚É£ - Exemplo de grava√ß√£o de √°udio\n` +
                `7Ô∏è‚É£ - Exemplo de GIF`
            );
            return;
        }

        // OP√á√ÉO 1 - INSCRI√á√ÉO
        if (normalizedBody === '1') {
            await client.sendMessage(
                from,
                `üìå Para se inscrever em um curso EAD:\n\n` +
                `1. Acesse: https://egov.df.gov.br/inscricoes-ead-2/\n` +
                `2. Clique em "*Quero me inscrever no curso...*"\n` +
                `3. Fa√ßa login com sua conta gov.br (recomendado)\n` +
                `4. Clique em *Pr√©-inscri√ß√£o*\n\n` +
                `‚ö†Ô∏è Servidores de PCDF, PMDF, CLDF, TCDF, CAESB, CEB, BRB, IGES, CEASA, CBMDF, EMATER, DPDF e TERRACAP devem se cadastrar como *usu√°rio externo*.\n\n` +
                `Digite *v√≠deo tutorial* para assistir ao passo a passo.\n\n` +
                `D√∫vidas? Digite *contato* para obter ajuda.`
            );
            return;
        }

        // OP√á√ÉO 2 - PROBLEMAS COM LOGIN
        if (normalizedBody === '2') {
            await client.sendMessage(
                from,
                `üîê Problemas com login no Ambiente Virtual?\n\n` +
                `Acesse: https://egovvirtual.df.gov.br/login/index.php\n\n` +
                `Op√ß√µes dispon√≠veis:\n` +
                `‚Ä¢ üîë Acessar com cpf e senha\n` +
                `‚Ä¢ ‚ùì Esqueci a senha\n` +
                `‚Ä¢ üÜî Recuperar por usu√°rio\n` +
                `‚Ä¢ üìß Recuperar por e-mail\n\n` +
                `Se o problema persistir, digite *contato* para suporte.`
            );
            return;
        }

        // OP√á√ÉO 3 - HOR√ÅRIOS DE ATENDIMENTO
        if (normalizedBody === '3') {
            await client.sendMessage(
                from,
                `‚è∞ *Hor√°rios de Atendimento:*\n\n` +
                `üìÖ Segunda a Sexta\n` +
                `üïò 08h00 √†s 12h00\n` +
                `üïì 13h00 √†s 17h00\n\n` +
                `üö´ S√°bados, domingos e feriados: sem atendimento.`
            );
            return;
        }

        // OP√á√ÉO 4 - CONTATO COM SUPORTE
        if (normalizedBody === '4' || normalizedBody === 'contato') {
            await client.sendMessage(
                from,
                `üì© *Suporte T√©cnico EAD EGOV/DF*\n\n` +
                `‚òéÔ∏è Telefone: (61) 3344-0096\n` +
                `üìß E-mail: ead.egov@economia.df.gov.br\n\n` +
                `‚è∞ Atendimento: Segunda a sexta, das 8h √†s 17h.\n\n` +
                `Descreva seu problema por e-mail e em breve responderemos.\n\n` +
                `Digite *menu* para voltar ao in√≠cio.`
            );
            return;
        }

        // OP√á√ÉO 5 - EXEMPLO DE IMAGEM
        if (normalizedBody === '5') {
            const imagePath = path.resolve(__dirname, 'm√≠dias', 'exemplo.jpg');
            if (!fs.existsSync(imagePath)) {
                await client.sendMessage(from, '‚ö†Ô∏è Imagem n√£o encontrada. Verifique a pasta "m√≠dias/exemplo.jpg"');
                return;
            }
            const imageBuffer = fs.readFileSync(imagePath);
            const media = new MessageMedia('image/jpeg', imageBuffer.toString('base64'), 'exemplo.jpg');
            await client.sendMessage(from, media, { caption: 'üñºÔ∏è *Exemplo de imagem enviada!*' });
            return;
        }

        // OP√á√ÉO 6 - EXEMPLO DE √ÅUDIO
        if (normalizedBody === '6') {
            const audioPath = path.resolve(__dirname, 'm√≠dias', 'exemplo-voz.mp3');
            if (!fs.existsSync(audioPath)) {
                await client.sendMessage(from, '‚ö†Ô∏è √Åudio n√£o encontrado. Verifique a pasta "m√≠dias/exemplo-voz.mp3"');
                return;
            }
            const audioBuffer = fs.readFileSync(audioPath);
            const media = new MessageMedia('√°udio/mp3', audioBuffer.toString('base64'), 'exemplo-voz.mp3');
            await client.sendMessage(from, media, { sendAudioAsVoice: true, caption: 'üîä *Exemplo de √°udio!*' });
            return;
        }

        // OP√á√ÉO 7 - EXEMPLO DE GIF
        if (normalizedBody === '7') {
            const gifPath = path.resolve(__dirname, 'm√≠dias', 'exemplo.gif');
            if (!fs.existsSync(gifPath)) {
                await client.sendMessage(from, '‚ö†Ô∏è GIF n√£o encontrado. Verifique a pasta "m√≠dias/exemplo.gif"');
                return;
            }
            const gifBuffer = fs.readFileSync(gifPath);
            const media = new MessageMedia('v√≠deo/gif', gifBuffer.toString('base64'), 'exemplo.gif');
            await client.sendMessage(from, media, { caption: 'üîÑ *GIF animado de exemplo!*' });
            return;
        }

        // OP√á√ÉO: V√çDEO TUTORIAL
        if (normalizedBody === 'video tutorial') {
            const videoPath = path.resolve(__dirname, 'm√≠dias', 'EGOV-Inscricao-Cadastro-Usuario-Externo.mp4');
            if (!fs.existsSync(videoPath)) {
                return await client.sendMessage(from, '‚ö†Ô∏è Arquivo n√£o encontrado. Contate o suporte.');
            }
            const fileSizeMB = fs.statSync(videoPath).size / 1024 / 1024;
            if (fileSizeMB > 16) {
                return await client.sendMessage(from, '‚ö†Ô∏è V√≠deo muito grande. M√°x: 16MB.');
            }
            try {
                const buffer = fs.readFileSync(videoPath);
                const media = new MessageMedia('v√≠deo/mp4', buffer.toString('base64'), 'tutorial-cadastro.mp4');
                await client.sendMessage(from, media, {
                    sendVideoAsDocument: false,
                    caption: 'üé• *V√≠deo Tutorial: Cadastro como Usu√°rio Externo*\n\n' +
                             'Digite *menu* para voltar.'
                });
            } catch (err) {
                console.error('‚ùå Falha ao enviar v√≠deo:', err);
                await client.sendMessage(from, '‚ö†Ô∏è Falha ao enviar v√≠deo. Tente novamente mais tarde.');
            }
            return;
        }

        // MENSAGEM DESCONHECIDA
        if (body) {
            await client.sendMessage(
                from,
                `‚ùå Desculpe, n√£o entendi sua mensagem.\n\n` +
                `Digite *menu* para ver as op√ß√µes ou *contato* para falar com o suporte.`
            );
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error.message);
        try {
            await client.sendMessage(from, '‚ö†Ô∏è Ocorreu um erro. Tente novamente mais tarde.');
        } catch (sendError) {
            console.error('‚ùå Falha ao enviar mensagem de erro:', sendError.message);
        }
    }
});